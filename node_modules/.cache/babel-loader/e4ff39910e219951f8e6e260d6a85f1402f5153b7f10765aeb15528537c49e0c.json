{"ast":null,"code":"import React,{useState,useRef,useEffect}from'react';import startIcon from'../assets/images/start.svg';import{ArrowUp,Mic}from'lucide-react';import PoweredBy from'./PoweredBy';import Header from'./Header';// Importing the Header component\nimport PromptSuggestions from'./PromptSuggestions';// Correct import statement\nimport{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const ChatMessages=_ref=>{let{pastConversation=[],setCurrentView,isHistory=false}=_ref;const[messages,setMessages]=useState(pastConversation||[]);// Initialize with pastConversation if provided\nconst[inputMessage,setInputMessage]=useState('');const[listening,setListening]=useState(false);// Track if the mic is listening\nconst[suggestions,setSuggestions]=useState([]);const[showSuggestions,setShowSuggestions]=useState(false);const messagesEndRef=useRef(null);const serverUrl='https://leapthelimit-1057493174729.me-west1.run.app';// Scroll to the latest message\nconst scrollToBottom=()=>{if((messages===null||messages===void 0?void 0:messages.length)>0){var _messagesEndRef$curre;(_messagesEndRef$curre=messagesEndRef.current)===null||_messagesEndRef$curre===void 0?void 0:_messagesEndRef$curre.scrollIntoView({behavior:\"smooth\"});}};useEffect(scrollToBottom,[messages]);// Get suggestions when input changes\nuseEffect(()=>{const getSuggestions=async()=>{// Only fetch suggestions if there's actual input and user is actively typing\nif(inputMessage.trim().length>2&&!messages.length){try{const response=await fetch(`${serverUrl}/suggest`,{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({partial_message:inputMessage.trim()})});if(response.ok){var _data$suggestions;const data=await response.json();if(((_data$suggestions=data.suggestions)===null||_data$suggestions===void 0?void 0:_data$suggestions.length)>0){setSuggestions(data.suggestions);setShowSuggestions(true);}else{setShowSuggestions(false);}}}catch(error){console.error('Error getting suggestions:',error);setShowSuggestions(false);}}else{setSuggestions([]);setShowSuggestions(false);}};const debounceTimer=setTimeout(getSuggestions,300);return()=>clearTimeout(debounceTimer);},[inputMessage,messages.length]);// Added messages.length to dependencies\n// Add language detection function\nconst detectLanguage=text=>{const arabicRegex=/[\\u0600-\\u06FF]/;const hebrewRegex=/[\\u0590-\\u05FF]/;if(arabicRegex.test(text)){return'ar';}else if(hebrewRegex.test(text)){return'he';}return'en';};// Send message to the server and update state with the response\nconst handleSend=async()=>{if(inputMessage.trim()){setShowSuggestions(false);// Hide suggestions when sending\nsetSuggestions([]);// Clear suggestions array\nconst newUserMessage={text:inputMessage,sender:'user'};setMessages([...messages,newUserMessage]);setInputMessage('');const detectedLanguage=detectLanguage(inputMessage);try{const response=await fetch(`${serverUrl}/chat`,{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({message:inputMessage,language:detectedLanguage})});if(!response.ok){throw new Error('Network response was not ok');}const data=await response.json();const newFinlixMessage={text:data.response,sender:'Finlix',language:data.language};setMessages(prevMessages=>[...prevMessages,newFinlixMessage]);try{// Save the conversation separately\nawait fetch(`${serverUrl}/save-chat-message`,{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({messages:[{text:inputMessage,sender:'user'},{text:data.response,sender:'Finlix'}]})});}catch(saveError){console.error('Error saving chat:',saveError);// Continue even if save fails\n}}catch(error){console.error('Error in chat API:',error);const errorMessage={text:'There was an error processing your request.',sender:'Finlix'};setMessages(prevMessages=>[...prevMessages,errorMessage]);}}};const handleKeyPress=e=>{if(e.key==='Enter'){handleSend();}};// Handle suggestion click\nconst handleSuggestionClick=suggestion=>{setInputMessage(suggestion);setShowSuggestions(false);};// Speech recognition function\nconst startSpeechRecognition=()=>{const SpeechRecognition=window.SpeechRecognition||window.webkitSpeechRecognition;if(!SpeechRecognition){alert('Speech recognition is not supported in your browser.');return;}const recognition=new SpeechRecognition();recognition.lang='en-US';recognition.interimResults=false;recognition.onresult=event=>{const transcript=event.results[0][0].transcript;setInputMessage(transcript);};recognition.onerror=event=>{console.error(`Speech recognition error: ${event.error}`);alert('An error occurred with speech recognition: '+event.error);};recognition.onend=()=>{setListening(false);};recognition.start();setListening(true);};return/*#__PURE__*/_jsxs(\"div\",{className:\"flex flex-col h-full bg-black text-white\",children:[isHistory&&/*#__PURE__*/_jsx(Header,{setCurrentView:setCurrentView}),/*#__PURE__*/_jsx(\"div\",{className:\"mb-3\",children:/*#__PURE__*/_jsx(PoweredBy,{})}),/*#__PURE__*/_jsxs(\"div\",{className:\"flex-1 overflow-y-auto scrollbar-none w-full relative pb-16\",children:[\" \",showSuggestions&&suggestions.length>0&&/*#__PURE__*/_jsx(\"div\",{className:\"absolute bottom-full left-0 right-0 bg-[#272626] rounded-t-lg p-2 border-t border-[#363636]\",children:suggestions.map((suggestion,index)=>/*#__PURE__*/_jsx(\"button\",{className:\"w-full text-left px-3 py-2 hover:bg-[#363636] rounded\",onClick:()=>handleSuggestionClick(suggestion),children:suggestion},index))}),/*#__PURE__*/_jsxs(\"div\",{className:\"space-y-2 px-4\",children:[messages.map((message,index)=>/*#__PURE__*/_jsxs(\"div\",{className:`flex ${message.sender==='user'?'justify-end':'justify-start'}`,children:[message.sender==='Finlix'&&/*#__PURE__*/_jsx(\"div\",{className:\"w-10 me-2\",children:/*#__PURE__*/_jsx(\"img\",{src:startIcon,alt:\"startIcon\"})}),/*#__PURE__*/_jsx(\"div\",{className:`rounded-lg px-3 py-2 max-w-[75%] font-medium ${message.sender==='user'?'bg-[#C736D9] text-white rounded-br-none':'bg-[#E9E9EB] text-black my-1 rounded-bl-none'}`,children:/*#__PURE__*/_jsx(\"p\",{className:\"text-sm\",children:message.text})})]},index)),/*#__PURE__*/_jsx(\"div\",{ref:messagesEndRef})]})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"absolute bottom-4 left-0 right-0 px-4\",children:[showSuggestions&&suggestions.length>0&&!messages.length&&/*#__PURE__*/_jsx(\"div\",{className:\"mb-2 space-y-1\",children:suggestions.map((suggestion,index)=>/*#__PURE__*/_jsx(\"button\",{className:\"w-full text-left px-4 py-2 bg-[#272626] hover:bg-[#363636]  rounded-lg text-white text-sm transition-colors\",onClick:()=>handleSuggestionClick(suggestion),children:suggestion},index))}),/*#__PURE__*/_jsxs(\"div\",{className:\"bg-white rounded-xl p-1 flex items-center\",children:[/*#__PURE__*/_jsx(\"button\",{className:\"p-2\",onClick:startSpeechRecognition,children:listening?/*#__PURE__*/_jsx(Mic,{color:\"#C736D9\"}):/*#__PURE__*/_jsx(Mic,{color:\"#828282\"})}),/*#__PURE__*/_jsx(\"input\",{type:\"text\",value:inputMessage,onChange:e=>setInputMessage(e.target.value),onKeyPress:handleKeyPress,placeholder:\"Message...\",className:\"bg-transparent outline-none p-1 text-[#828282] text-sm flex-1\"}),inputMessage.trim()&&/*#__PURE__*/_jsx(\"button\",{className:\"bg-black rounded-full p-1\",onClick:handleSend,children:/*#__PURE__*/_jsx(ArrowUp,{})})]})]})]});};export default ChatMessages;","map":{"version":3,"names":["React","useState","useRef","useEffect","startIcon","ArrowUp","Mic","PoweredBy","Header","PromptSuggestions","jsx","_jsx","jsxs","_jsxs","ChatMessages","_ref","pastConversation","setCurrentView","isHistory","messages","setMessages","inputMessage","setInputMessage","listening","setListening","suggestions","setSuggestions","showSuggestions","setShowSuggestions","messagesEndRef","serverUrl","scrollToBottom","length","_messagesEndRef$curre","current","scrollIntoView","behavior","getSuggestions","trim","response","fetch","method","headers","body","JSON","stringify","partial_message","ok","_data$suggestions","data","json","error","console","debounceTimer","setTimeout","clearTimeout","detectLanguage","text","arabicRegex","hebrewRegex","test","handleSend","newUserMessage","sender","detectedLanguage","message","language","Error","newFinlixMessage","prevMessages","saveError","errorMessage","handleKeyPress","e","key","handleSuggestionClick","suggestion","startSpeechRecognition","SpeechRecognition","window","webkitSpeechRecognition","alert","recognition","lang","interimResults","onresult","event","transcript","results","onerror","onend","start","className","children","map","index","onClick","src","alt","ref","color","type","value","onChange","target","onKeyPress","placeholder"],"sources":["C:/Users/a222_/Desktop/finlit-widget-main/src/components/ChatMessages.js"],"sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\nimport startIcon from '../assets/images/start.svg';\nimport { ArrowUp, Mic } from 'lucide-react';\nimport PoweredBy from './PoweredBy';\nimport Header from './Header';  // Importing the Header component\nimport PromptSuggestions from './PromptSuggestions';  // Correct import statement\n\nconst ChatMessages = ({ pastConversation = [], setCurrentView, isHistory = false }) => {\n    const [messages, setMessages] = useState(pastConversation || []);  // Initialize with pastConversation if provided\n    const [inputMessage, setInputMessage] = useState('');\n    const [listening, setListening] = useState(false);  // Track if the mic is listening\n    const [suggestions, setSuggestions] = useState([]);\n    const [showSuggestions, setShowSuggestions] = useState(false);\n    const messagesEndRef = useRef(null);\n    const serverUrl = 'https://leapthelimit-1057493174729.me-west1.run.app';\n\n    // Scroll to the latest message\n    const scrollToBottom = () => {\n        if (messages?.length > 0) {\n            messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\n        }\n    };\n\n    useEffect(scrollToBottom, [messages]);\n\n    // Get suggestions when input changes\n    useEffect(() => {\n        const getSuggestions = async () => {\n            // Only fetch suggestions if there's actual input and user is actively typing\n            if (inputMessage.trim().length > 2 && !messages.length) {\n                try {\n                    const response = await fetch(`${serverUrl}/suggest`, {\n                        method: 'POST',\n                        headers: {\n                            'Content-Type': 'application/json',\n                        },\n                        body: JSON.stringify({\n                            partial_message: inputMessage.trim()\n                        }),\n                    });\n\n                    if (response.ok) {\n                        const data = await response.json();\n                        if (data.suggestions?.length > 0) {\n                            setSuggestions(data.suggestions);\n                            setShowSuggestions(true);\n                        } else {\n                            setShowSuggestions(false);\n                        }\n                    }\n                } catch (error) {\n                    console.error('Error getting suggestions:', error);\n                    setShowSuggestions(false);\n                }\n            } else {\n                setSuggestions([]);\n                setShowSuggestions(false);\n            }\n        };\n\n        const debounceTimer = setTimeout(getSuggestions, 300);\n        return () => clearTimeout(debounceTimer);\n    }, [inputMessage, messages.length]); // Added messages.length to dependencies\n\n    // Add language detection function\n    const detectLanguage = (text) => {\n        const arabicRegex = /[\\u0600-\\u06FF]/;\n        const hebrewRegex = /[\\u0590-\\u05FF]/;\n        \n        if (arabicRegex.test(text)) {\n            return 'ar';\n        } else if (hebrewRegex.test(text)) {\n            return 'he';\n        }\n        return 'en';\n    };\n\n    // Send message to the server and update state with the response\n    const handleSend = async () => {\n        if (inputMessage.trim()) {\n            setShowSuggestions(false); // Hide suggestions when sending\n            setSuggestions([]); // Clear suggestions array\n            const newUserMessage = { text: inputMessage, sender: 'user' };\n            setMessages([...messages, newUserMessage]);\n            setInputMessage('');\n\n            const detectedLanguage = detectLanguage(inputMessage);\n\n            try {\n                const response = await fetch(`${serverUrl}/chat`, {\n                    method: 'POST',\n                    headers: {\n                        'Content-Type': 'application/json',\n                    },\n                    body: JSON.stringify({\n                        message: inputMessage,\n                        language: detectedLanguage\n                    }),\n                });\n\n                if (!response.ok) {\n                    throw new Error('Network response was not ok');\n                }\n\n                const data = await response.json();\n                const newFinlixMessage = { \n                    text: data.response, \n                    sender: 'Finlix',\n                    language: data.language \n                };\n                setMessages((prevMessages) => [...prevMessages, newFinlixMessage]);\n\n                try {\n                    // Save the conversation separately\n                    await fetch(`${serverUrl}/save-chat-message`, {\n                        method: 'POST',\n                        headers: { 'Content-Type': 'application/json' },\n                        body: JSON.stringify({\n                            messages: [\n                                { text: inputMessage, sender: 'user' },\n                                { text: data.response, sender: 'Finlix' }\n                            ]\n                        }),\n                    });\n                } catch (saveError) {\n                    console.error('Error saving chat:', saveError);\n                    // Continue even if save fails\n                }\n\n            } catch (error) {\n                console.error('Error in chat API:', error);\n                const errorMessage = { \n                    text: 'There was an error processing your request.', \n                    sender: 'Finlix' \n                };\n                setMessages((prevMessages) => [...prevMessages, errorMessage]);\n            }\n        }\n    };\n\n    const handleKeyPress = (e) => {\n        if (e.key === 'Enter') {\n            handleSend();\n        }\n    };\n\n    // Handle suggestion click\n    const handleSuggestionClick = (suggestion) => {\n        setInputMessage(suggestion);\n        setShowSuggestions(false);\n    };\n\n    // Speech recognition function\n    const startSpeechRecognition = () => {\n        const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;\n\n        if (!SpeechRecognition) {\n            alert('Speech recognition is not supported in your browser.');\n            return;\n        }\n\n        const recognition = new SpeechRecognition();\n        recognition.lang = 'en-US';\n        recognition.interimResults = false;\n\n        recognition.onresult = (event) => {\n            const transcript = event.results[0][0].transcript;\n            setInputMessage(transcript);\n        };\n\n        recognition.onerror = (event) => {\n            console.error(`Speech recognition error: ${event.error}`);\n            alert('An error occurred with speech recognition: ' + event.error);\n        };\n\n        recognition.onend = () => {\n            setListening(false);\n        };\n\n        recognition.start();\n        setListening(true);\n    };\n\n    return (\n        <div className=\"flex flex-col h-full bg-black text-white\">\n            {isHistory && <Header setCurrentView={setCurrentView} />}\n            <div className='mb-3'>\n                <PoweredBy />\n            </div>\n            \n            {/* Main chat container with proper spacing */}\n            <div className=\"flex-1 overflow-y-auto scrollbar-none w-full relative pb-16\"> {/* Added pb-16 for input bar space */}\n                {/* Suggestions section */}\n                {showSuggestions && suggestions.length > 0 && (\n                    <div className=\"absolute bottom-full left-0 right-0 bg-[#272626] rounded-t-lg p-2 border-t border-[#363636]\">\n                        {suggestions.map((suggestion, index) => (\n                            <button\n                                key={index}\n                                className=\"w-full text-left px-3 py-2 hover:bg-[#363636] rounded\"\n                                onClick={() => handleSuggestionClick(suggestion)}\n                            >\n                                {suggestion}\n                            </button>\n                        ))}\n                    </div>\n                )}\n                \n                {/* Messages section */}\n                <div className=\"space-y-2 px-4\">\n                    {messages.map((message, index) => (\n                        <div key={index} className={`flex ${message.sender === 'user' ? 'justify-end' : 'justify-start'}`}>\n                            {message.sender === 'Finlix' && (\n                                <div className=\"w-10 me-2\">\n                                    <img src={startIcon} alt='startIcon' />\n                                </div>\n                            )}\n                            <div className={`rounded-lg px-3 py-2 max-w-[75%] font-medium ${\n                                message.sender === 'user' \n                                    ? 'bg-[#C736D9] text-white rounded-br-none' \n                                    : 'bg-[#E9E9EB] text-black my-1 rounded-bl-none'\n                            }`}>\n                                <p className=\"text-sm\">{message.text}</p>\n                            </div>\n                        </div>\n                    ))}\n                    <div ref={messagesEndRef} />\n                </div>\n            </div>\n\n            {/* Input bar fixed at bottom */}\n            <div className=\"absolute bottom-4 left-0 right-0 px-4\">\n                {showSuggestions && suggestions.length > 0 && !messages.length && (\n                    <div className=\"mb-2 space-y-1\">\n                        {suggestions.map((suggestion, index) => (\n                            <button\n                                key={index}\n                                className=\"w-full text-left px-4 py-2 bg-[#272626] hover:bg-[#363636] \n                                         rounded-lg text-white text-sm transition-colors\"\n                                onClick={() => handleSuggestionClick(suggestion)}\n                            >\n                                {suggestion}\n                            </button>\n                        ))}\n                    </div>\n                )}\n                <div className=\"bg-white rounded-xl p-1 flex items-center\">\n                    <button className=\"p-2\" onClick={startSpeechRecognition}>\n                        {listening ? (\n                            <Mic color='#C736D9' />\n                        ) : (\n                            <Mic color='#828282' />\n                        )}\n                    </button>\n                    <input\n                        type=\"text\"\n                        value={inputMessage}\n                        onChange={(e) => setInputMessage(e.target.value)}\n                        onKeyPress={handleKeyPress}\n                        placeholder=\"Message...\"\n                        className=\"bg-transparent outline-none p-1 text-[#828282] text-sm flex-1\"\n                    />\n                    {inputMessage.trim() && (\n                        <button className=\"bg-black rounded-full p-1\" onClick={handleSend}>\n                            <ArrowUp />\n                        </button>\n                    )}\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default ChatMessages;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}